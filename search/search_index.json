{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Online Normalization (onorm)","text":"<pre><code>import numpy as np\nimport pandas as pd\nfrom plotnine import aes, geom_point, ggplot, theme_minimal\n</code></pre> <pre><code>n = 100\nd = 2\n\nX = np.random.normal(size=(n, d))\ndf = pd.DataFrame(X, columns=[\"X1\", \"X2\"])\n\nggplot(df, aes(\"X1\", \"X2\")) + geom_point() + theme_minimal()\n</code></pre>"},{"location":"about/","title":"About","text":""},{"location":"about/#about-the-package","title":"About the package","text":"<p>This package is intended to provide tools for performing normalization on an incoming stream of data.</p>"},{"location":"about/#about-us","title":"About us","text":"<p>Check us out in our respective corners of the internet:</p> <ul> <li>David Arbour</li> <li>Drew Dimmery</li> </ul>"},{"location":"code-of-conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code-of-conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code-of-conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code-of-conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code-of-conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code-of-conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code-of-conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing-to-this-project","title":"Contributing to this project","text":""},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Before starting out, please take a look at our Code of Conduct. Participation means that you agree to engage constructively with the community as per the Code.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>The first step is to clone this repository and install all dependencies. You can do this with poetry:</p> <pre><code>poetry install\n</code></pre> <p>or just with <code>pip</code>: <pre><code>pip install .\n</code></pre></p> <p>Using poetry is particularly nice because it will keep all dependencies in a virtual environment without confusing your local setup.</p> <p>A few tools are provided to make things easier. A basic <code>Makefile</code> provides the necessary commands to build the entire package and documentation. Running <code>make</code> will build everything necessary for local testing.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>Contributions are made to this repo via Issues and Pull Requests (PRs), primarily the former.</p>"},{"location":"contributing/#issues","title":"Issues","text":"<p>Please try to provide a minimal reproducible example. If that isn't possible, explain as clearly and simply why that is, along with all of the relevant debugging steps you've already taken.</p>"},{"location":"contributing/#pull-requests-prs","title":"Pull Requests (PRs)","text":"<p>Since this is a stripped down implementation, it seems unlikely we will accept substantial PRs or feature requests. If you believe there is fundamental functionality that is missing, feel free to open an Issue and we can discuss.</p>"},{"location":"coverage/","title":"Coverage report","text":""},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>onorm<ul> <li>minmax</li> <li>normalization_base</li> <li>pipeline</li> </ul> </li> </ul>"},{"location":"reference/onorm/","title":"onorm","text":""},{"location":"reference/onorm/minmax/","title":"minmax","text":""},{"location":"reference/onorm/minmax/#onorm.minmax.MinMaxScaler","title":"<code>MinMaxScaler(n_dim)</code>","text":"<p>               Bases: <code>Normalizer</code></p> <p>Min-Max Scaling for each feature</p> <p>The class performs element-wise online updates of a minimum and maximum and then normalizes so that each element, \\(i\\), of the vector \\(x_t\\) is guaranteed to lie within zero and one.</p> <p>Define the minimum and maximum at time \\(t\\):</p> \\[\\textrm{mn}_{ti} = \\min \\{x_{1i},\\dots x_{ti}\\}\\] \\[\\textrm{mx}_{ti} = \\max \\{x_{1i},\\dots x_{ti}\\}\\] <p>Then normalization is:</p> \\[\\frac{x_{ti} - \\textrm{mn}_{ti}}{\\textrm{mx}_{ti} - \\textrm{mn}_{ti}}\\] Source code in <code>src/onorm/minmax.py</code> <pre><code>def __init__(self, n_dim: int) -&gt; None:\n    self.n_dim = n_dim\n    self.reset()\n</code></pre>"},{"location":"reference/onorm/minmax/#onorm.minmax.MinMaxScaler.partial_fit","title":"<code>partial_fit(x)</code>","text":"<p>Update the minimum and maximum for each feature.</p> <p>Compares the new feature vector to the previous minimum and maximum for each dimension and updates the state.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>ndarray</code> <p>A 1d array representing a new observation.</p> required Source code in <code>src/onorm/minmax.py</code> <pre><code>def partial_fit(self, x: np.ndarray) -&gt; None:\n    \"\"\"Update the minimum and maximum for each feature.\n\n    Compares the new feature vector to the previous minimum\n    and maximum for each dimension and updates the state.\n\n    Args:\n        x: A 1d array representing a new observation.\n    \"\"\"\n    self._update_min(x)\n    self._update_max(x)\n</code></pre>"},{"location":"reference/onorm/minmax/#onorm.minmax.MinMaxScaler.transform","title":"<code>transform(x)</code>","text":"<p>Transform the feature vector according to the current state</p> <p>If the current minimum and maximum are equal, then the transformation returns \\(x_{ti} - \\textrm{mn}_{ti}\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>ndarray</code> <p>A 1d array representing an observation to normalize.</p> required Source code in <code>src/onorm/minmax.py</code> <pre><code>def transform(self, x: np.ndarray) -&gt; np.ndarray:\n    \"\"\"Transform the feature vector according to the current state\n\n    If the current minimum and maximum are equal, then the transformation\n    returns $x_{ti} - \\\\textrm{mn}_{ti}$.\n\n    Args:\n        x: A 1d array representing an observation to normalize.\n    \"\"\"\n    denom = self.max - self.min\n    if np.linalg.norm(denom) &lt;= np.finfo(np.float64).eps:\n        denom = 1\n    return (x - self.min) / denom\n</code></pre>"},{"location":"reference/onorm/normalization_base/","title":"normalization_base","text":""},{"location":"reference/onorm/normalization_base/#onorm.normalization_base.Normalizer","title":"<code>Normalizer(**kwargs)</code>","text":"<p>Base class</p> <p>This is the base class for all normalizers. They use a standard API.</p> Source code in <code>src/onorm/normalization_base.py</code> <pre><code>def __init__(self, **kwargs) -&gt; None:\n    pass\n</code></pre>"},{"location":"reference/onorm/normalization_base/#onorm.normalization_base.Normalizer.partial_fit","title":"<code>partial_fit(x)</code>  <code>abstractmethod</code>","text":"<p>Progressive fitting of normalization model</p> <p>This method takes a vector of data and updates the normalization model. The specifics of that model depend on the particular implementation.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>ndarray</code> <p>A 1d array representing a new observation.</p> required Source code in <code>src/onorm/normalization_base.py</code> <pre><code>@abstractmethod\ndef partial_fit(self, x: np.ndarray) -&gt; None:\n    \"\"\"Progressive fitting of normalization model\n\n    This method takes a vector of data and updates the normalization\n    model. The specifics of that model depend on the particular implementation.\n\n    Args:\n        x: A 1d array representing a new observation.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/onorm/normalization_base/#onorm.normalization_base.Normalizer.partial_fit_transform","title":"<code>partial_fit_transform(x)</code>","text":"<p>Fit normalization model and transform data</p> <p>This method takes a vector of data, updates the normalization model and transforms the supplied data. The specifics of that model depend on the particular implementation.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>ndarray</code> <p>A 1d array representing a new observation to normalize.</p> required Source code in <code>src/onorm/normalization_base.py</code> <pre><code>def partial_fit_transform(self, x: np.ndarray) -&gt; np.ndarray:\n    \"\"\"Fit normalization model and transform data\n\n    This method takes a vector of data, updates the normalization model and transforms the\n    supplied data. The specifics of that model depend on the particular implementation.\n\n    Args:\n        x: A 1d array representing a new observation to normalize.\n    \"\"\"\n    self.partial_fit(x)\n    return self.transform(x)\n</code></pre>"},{"location":"reference/onorm/normalization_base/#onorm.normalization_base.Normalizer.transform","title":"<code>transform(x)</code>  <code>abstractmethod</code>","text":"<p>Normalize data</p> <p>This method takes a vector of data and uses the normalization model to appropriately transform the data. The specifics of that model depend on the particular implementation.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>ndarray</code> <p>A 1d array representing an observation to normalize.</p> required Source code in <code>src/onorm/normalization_base.py</code> <pre><code>@abstractmethod\ndef transform(self, x: np.ndarray) -&gt; np.ndarray:\n    \"\"\"Normalize data\n\n    This method takes a vector of data and uses the normalization model to\n    appropriately transform the data. The specifics of that model depend on the\n    particular implementation.\n\n    Args:\n        x: A 1d array representing an observation to normalize.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/onorm/pipeline/","title":"pipeline","text":""},{"location":"reference/onorm/pipeline/#onorm.pipeline.Pipeline","title":"<code>Pipeline(normalizers)</code>","text":"<p>               Bases: <code>Normalizer</code></p> <p>Pipeline of multiple normalizers</p> Source code in <code>src/onorm/pipeline.py</code> <pre><code>def __init__(self, normalizers: List[Normalizer]) -&gt; None:\n    self.normalizers = normalizers\n</code></pre>"}]}